// Code generated by templ@v0.2.364 DO NOT EDIT.

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"tiny.poker/pvp-server/src/logic"
)

type HandStateForPlayer struct {
	PlayerId       int
	GameId         int
	PocketCards    []logic.Card
	Stack          int
	Pot            int
	LastAction     string
	HandStrength   string
	Opponents      []Opponent
	CommunityCards []logic.Card
	Actions        ActionBlock
}

type ActionBlock struct {
	CheckFoldLabel    string
	CheckFoldDisabled bool
	CallDisabled      bool
	CallAmount        int
	RaiseDisabled     bool
	RaiseAmounts      []int
	PlayerId          int
	HandFinished      bool
	GameFinished      bool
}
type AvailableAction struct {
	Type         string
	RaiseAmounts []int
	CallAmount   int
	Disabled     bool
}

type Opponent struct {
	Stack        int
	PlayerId     int
	Cards        []logic.Card
	LastAction   string
	HandStrength string
}

func Game(s HandStateForPlayer) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div hx-ext=\"ws\" ws-connect=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/game/%v/player/%v/ws", s.GameId, s.PlayerId)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"flex flex-col justify-around h-full bg-neutral-300 app-container\">")
		if err != nil {
			return err
		}
		err = Opponents(s.Opponents).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = CommunityCards(s.CommunityCards).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = Pot(s.Pot).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"flex flex-col gap-2 items-center\">")
		if err != nil {
			return err
		}
		err = MyLastAction(s.LastAction).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = MyHandStrength(s.HandStrength).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = MyStack(s.Stack).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = PocketCards(s.PocketCards).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = Actions(s.Actions).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Stack(amount int) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_2 := templ.GetChildren(ctx)
		if var_2 == nil {
			var_2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"flex items-center gap-1\"><p>")
		if err != nil {
			return err
		}
		var var_3 string = fmt.Sprint(amount)
		_, err = templBuffer.WriteString(templ.EscapeString(var_3))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p><i class=\"fa-solid fa-coins\"></i></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func LastAction(action string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		switch action {
		case "Winner":
			_, err = templBuffer.WriteString("<div class=\"border-2 border-yellow-900 rounded-md px-4 bg-yellow-300 text-yellow-900\">")
			if err != nil {
				return err
			}
			var_5 := `Winner`
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		case "None":
			_, err = templBuffer.WriteString("<div class=\"border-2 border-neutral-300 rounded-md px-4 bg-neutral-300 text-neutral-300\">")
			if err != nil {
				return err
			}
			var_6 := `None`
			_, err = templBuffer.WriteString(var_6)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		case "Check":
			_, err = templBuffer.WriteString("<div class=\"border-2 border-neutral-900 rounded-md px-4 bg-neutral-300 text-neutral-900\">")
			if err != nil {
				return err
			}
			var_7 := `Check`
			_, err = templBuffer.WriteString(var_7)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		case "Fold":
			_, err = templBuffer.WriteString("<div class=\"border-2 border-red-900 rounded-md px-4 bg-red-300 text-red-900\">")
			if err != nil {
				return err
			}
			var_8 := `Fold`
			_, err = templBuffer.WriteString(var_8)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		case "Call":
			_, err = templBuffer.WriteString("<div class=\"border-2 border-green-900 rounded-md px-4 bg-green-300 text-green-900\">")
			if err != nil {
				return err
			}
			var_9 := `Call`
			_, err = templBuffer.WriteString(var_9)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		case "Big Blind":
			_, err = templBuffer.WriteString("<div class=\"border-2 border-yellow-900 rounded-md px-4 bg-yellow-400 text-yellow-900\">")
			if err != nil {
				return err
			}
			var_10 := `Big Blind`
			_, err = templBuffer.WriteString(var_10)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		case "Raise":
			_, err = templBuffer.WriteString("<div class=\"border-2 border-yellow-900 rounded-md px-4 bg-yellow-400 text-yellow-900\">")
			if err != nil {
				return err
			}
			var_11 := `Raise`
			_, err = templBuffer.WriteString(var_11)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		case "Small Blind":
			_, err = templBuffer.WriteString("<div class=\"border-2 border-yellow-900 rounded-md px-4 bg-yellow-200 text-yellow-900\">")
			if err != nil {
				return err
			}
			var_12 := `Small Blind`
			_, err = templBuffer.WriteString(var_12)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Opponents(opponents []Opponent) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_13 := templ.GetChildren(ctx)
		if var_13 == nil {
			var_13 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"opponents\" class=\"flex flex-col justify-center items-center\">")
		if err != nil {
			return err
		}
		for _, opponent := range opponents {
			_, err = templBuffer.WriteString("<div>")
			if err != nil {
				return err
			}
			var_14 := `Player#`
			_, err = templBuffer.WriteString(var_14)
			if err != nil {
				return err
			}
			var var_15 string = fmt.Sprint(opponent.PlayerId)
			_, err = templBuffer.WriteString(templ.EscapeString(var_15))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div> ")
			if err != nil {
				return err
			}
			err = Stack(opponent.Stack).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			if opponent.HandStrength != "None" {
				_, err = templBuffer.WriteString("<div>")
				if err != nil {
					return err
				}
				var var_16 string = opponent.HandStrength
				_, err = templBuffer.WriteString(templ.EscapeString(var_16))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			err = LastAction(opponent.LastAction).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func getStylesFromSuit(suit string) string {
	switch suit {
	case "hearts":
		return "bg-red-400 text-white"
	case "diamonds":
		return "bg-green-400 text-white"
	case "spades":
		return "bg-neutral-600 text-white"
	case "clubs":
		return "bg-white text-neutral-600"
	case "Hidden":
		return "bg-neutral-400 text-white"
	}
	return ""
}

func Card(card logic.Card) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_17 := templ.GetChildren(ctx)
		if var_17 == nil {
			var_17 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_18 = []any{
			"rounded-md w-10 h-10 md:w-16 md:h-16 text-2xl flex items-center justify-center gap-1 relative drop-shadow-sm text-2xl",
			getStylesFromSuit(card.Suit),
		}
		err = templ.RenderCSSItems(ctx, templBuffer, var_18...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_18).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if card.Suit == "Hidden" {
			_, err = templBuffer.WriteString("<i class=\"fa-solid fa-eye-slash\"></i>")
			if err != nil {
				return err
			}
		} else if card.Rank == 1 {
			_, err = templBuffer.WriteString("<i class=\"fa-solid fa-a\"></i>")
			if err != nil {
				return err
			}
		} else if card.Rank < 10 {
			var var_19 = []any{fmt.Sprintf("fa-solid fa-%v", card.Rank)}
			err = templ.RenderCSSItems(ctx, templBuffer, var_19...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<i class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_19).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"></i>")
			if err != nil {
				return err
			}
		} else if card.Rank == 10 {
			_, err = templBuffer.WriteString("<div class=\"flex\"><i class=\"fa-solid fa-1\"></i><i class=\"fa-solid fa-0\"></i></div>")
			if err != nil {
				return err
			}
		} else if card.Rank == 11 {
			_, err = templBuffer.WriteString("<i class=\"fa-solid fa-chess-bishop\"></i>")
			if err != nil {
				return err
			}
		} else if card.Rank == 12 {
			_, err = templBuffer.WriteString("<i class=\"fa-solid fa-chess-queen\"></i>")
			if err != nil {
				return err
			}
		} else if card.Rank == 13 {
			_, err = templBuffer.WriteString("<i class=\"fa-solid fa-chess-king\"></i>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func CommunityCards(cards []logic.Card) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_20 := templ.GetChildren(ctx)
		if var_20 == nil {
			var_20 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"community-cards\" class=\"flex gap-2 justify-center items-center\">")
		if err != nil {
			return err
		}
		for _, card := range cards {
			err = Card(card).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Pot(amount int) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_21 := templ.GetChildren(ctx)
		if var_21 == nil {
			var_21 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"pot\" class=\"flex justify-center items-center\">")
		if err != nil {
			return err
		}
		err = Stack(amount).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func MyLastAction(lastAction string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_22 := templ.GetChildren(ctx)
		if var_22 == nil {
			var_22 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"last-action\">")
		if err != nil {
			return err
		}
		err = LastAction(lastAction).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func MyHandStrength(handStrength string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_23 := templ.GetChildren(ctx)
		if var_23 == nil {
			var_23 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"hand-strength\">")
		if err != nil {
			return err
		}
		if handStrength != "None" {
			_, err = templBuffer.WriteString("<div>")
			if err != nil {
				return err
			}
			var var_24 string = handStrength
			_, err = templBuffer.WriteString(templ.EscapeString(var_24))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func MyStack(amount int) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_25 := templ.GetChildren(ctx)
		if var_25 == nil {
			var_25 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"stack\">")
		if err != nil {
			return err
		}
		err = Stack(amount).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func PocketCards(cards []logic.Card) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_26 := templ.GetChildren(ctx)
		if var_26 == nil {
			var_26 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"poket-cards\" class=\"flex gap-2 justify-center\">")
		if err != nil {
			return err
		}
		for _, card := range cards {
			err = Card(card).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Actions(actions ActionBlock) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_27 := templ.GetChildren(ctx)
		if var_27 == nil {
			var_27 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if actions.GameFinished {
			_, err = templBuffer.WriteString("<div id=\"actions\" class=\"flex flex-col items-center justify-center\">")
			if err != nil {
				return err
			}
			var_28 := `Game finished!`
			_, err = templBuffer.WriteString(var_28)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" <a href=\"/\" class=\"px-4 py-2 min-w-max w-24 bg-gray-50 rounded-md active:scale-90 transition flex gap-2 items-center justify-center disabled:bg-neutral-300 disabled:border-2 disabled:border-gray-50 disabled:active:scale-100\">")
			if err != nil {
				return err
			}
			var_29 := `Back`
			_, err = templBuffer.WriteString(var_29)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></div>")
			if err != nil {
				return err
			}
		} else if actions.HandFinished {
			_, err = templBuffer.WriteString("<div id=\"actions\">")
			if err != nil {
				return err
			}
			var_30 := `Preparing next hand...`
			_, err = templBuffer.WriteString(var_30)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<form id=\"actions\" ws-send class=\"flex gap-2 justify-center\"><button name=\"action\" type=\"submit\" value=\"CheckFold\"")
			if err != nil {
				return err
			}
			if actions.CheckFoldDisabled {
				_, err = templBuffer.WriteString(" disabled")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" class=\"px-4 py-2 min-w-max w-24 bg-gray-50 rounded-md active:scale-90 transition flex gap-2 items-center justify-center disabled:bg-neutral-300 disabled:border-2 disabled:border-gray-50 disabled:active:scale-100\">")
			if err != nil {
				return err
			}
			var var_31 string = actions.CheckFoldLabel
			_, err = templBuffer.WriteString(templ.EscapeString(var_31))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button><button name=\"action\" type=\"submit\" value=\"Call\"")
			if err != nil {
				return err
			}
			if actions.CallDisabled {
				_, err = templBuffer.WriteString(" disabled")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" class=\"px-4 py-2 min-w-max w-24 bg-gray-50 rounded-md active:scale-90 transition flex gap-2 items-center justify-center disabled:bg-neutral-300 disabled:border-2 disabled:border-gray-50 disabled:active:scale-100\">")
			if err != nil {
				return err
			}
			var_32 := `Call`
			_, err = templBuffer.WriteString(var_32)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			if actions.CallAmount > 0 {
				var var_33 string = fmt.Sprint(actions.CallAmount)
				_, err = templBuffer.WriteString(templ.EscapeString(var_33))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" <i class=\"fa-solid fa-coins\"></i>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</button><button hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/raise-menu/%v", actions.PlayerId)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-swap=\"outerHTML\" hx-target=\"#actions\"")
			if err != nil {
				return err
			}
			if actions.RaiseDisabled {
				_, err = templBuffer.WriteString(" disabled")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" class=\"px-4 py-2 min-w-max w-24 bg-gray-50 rounded-md active:scale-90 transition flex gap-2 items-center justify-center disabled:bg-neutral-300 disabled:border-2 disabled:border-gray-50 disabled:active:scale-100\">")
			if err != nil {
				return err
			}
			var_34 := `Raise`
			_, err = templBuffer.WriteString(var_34)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button></form>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func RaiseMenu(actions ActionBlock) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_35 := templ.GetChildren(ctx)
		if var_35 == nil {
			var_35 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"actions\" class=\"flex gap-2 justify-center\"><button hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/raise-menu/%v/back", actions.PlayerId)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-swap=\"outerHTML\" hx-target=\"#actions\" class=\"px-4 py-2 min-w-max w-24 bg-gray-50 rounded-md active:scale-90 transition flex gap-2 items-center justify-center disabled:bg-neutral-300 disabled:border-2 disabled:border-gray-50 disabled:active:scale-100\">")
		if err != nil {
			return err
		}
		var_36 := `Back`
		_, err = templBuffer.WriteString(var_36)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><div class=\"flex gap-2 justify-center\">")
		if err != nil {
			return err
		}
		for _, amount := range actions.RaiseAmounts {
			_, err = templBuffer.WriteString("<form ws-send><input type=\"number\" class=\"hidden\" name=\"amount\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint(amount)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"><button name=\"action\" type=\"submit\" value=\"Raise\" class=\"px-4 py-2 min-w-max w-24 bg-gray-50 rounded-md active:scale-90 transition flex gap-2 items-center justify-center disabled:bg-neutral-300 disabled:border-2 disabled:border-gray-50 disabled:active:scale-100\">")
			if err != nil {
				return err
			}
			var var_37 string = fmt.Sprint(amount)
			_, err = templBuffer.WriteString(templ.EscapeString(var_37))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" <i class=\"fa-solid fa-coins\"></i></button></form>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
