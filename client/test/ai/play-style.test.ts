import { calculateAcceptedActions } from "../../src/lib/poker-logic/ai";
describe("accepted actions", () => {
  const stack = 100;
  const bigBlind = 5;
  test.each([
    // handRating, minRaise, maxCall
    // loose: 1.0
    // aggression: 0.0
    [1.0, 0.0, 0.0, 0, 120],
    [1.0, 0.0, 0.25, 0, 120],
    [1.0, 0.0, 0.5, 0, 120],
    [1.0, 0.0, 0.75, 0, 120],
    [1.0, 0.0, 1.0, 120, 120],
    // aggression: 0.25
    [1.0, 0.25, 0.0, 0, 120],
    [1.0, 0.25, 0.25, 4, 120],
    [1.0, 0.25, 0.5, 22, 120],
    [1.0, 0.25, 0.75, 59, 120],
    [1.0, 0.25, 1.0, 120, 120],
    // aggression: 0.5
    [1.0, 0.5, 0.0, 0, 120],
    [1.0, 0.5, 0.25, 30, 120],
    [1.0, 0.5, 0.5, 60, 120],
    [1.0, 0.5, 0.75, 90, 120],
    [1.0, 0.5, 1.0, 120, 120],
    // aggression: 0.75
    [1.0, 0.75, 0.0, 0, 120],
    [1.0, 0.75, 0.25, 67, 120],
    [1.0, 0.75, 0.5, 90, 120],
    [1.0, 0.75, 0.75, 106, 120],
    [1.0, 0.75, 1.0, 120, 120],
    // aggression: 1
    [1.0, 1.0, 0.0, 120, 120],
    [1.0, 1.0, 0.25, 120, 120],
    [1.0, 1.0, 0.5, 120, 120],
    [1.0, 1.0, 0.75, 120, 120],
    [1.0, 1.0, 1.0, 120, 120],

    // losseness: 0
    [0.0, 0.0, 0.0, 0, 0],
    [0.0, 0.0, 0.25, 0, 0],
    [0.0, 0.0, 0.5, 0, 0],
    [0.0, 0.0, 0.75, 0, 0],
    [0.0, 0.0, 1.0, 120, 120],

    // losseness: 0.25
    [0.25, 0.0, 0.0, 0, 0],
    [0.25, 0.0, 0.25, 0, 4],
    [0.25, 0.0, 0.5, 0, 22],
    [0.25, 0.0, 0.75, 0, 59],
    [0.25, 0.0, 1.0, 120, 120],

    // losseness: 0.5
    [0.5, 0.0, 0.0, 0, 0],
    [0.5, 0.0, 0.25, 0, 30],
    [0.5, 0.0, 0.5, 0, 60],
    [0.5, 0.0, 0.75, 0, 90],
    [0.5, 0.0, 1.0, 120, 120],

    // losseness: 0.75
    [0.75, 0.0, 0.0, 0, 0],
    [0.75, 0.0, 0.25, 0, 67],
    [0.75, 0.0, 0.5, 0, 90],
    [0.75, 0.0, 0.75, 0, 106],
    [0.75, 0.0, 1.0, 120, 120],
    //
    // losseness: 1.0
    [1.0, 0.0, 0.0, 0, 120],
    [1.0, 0.0, 0.25, 0, 120],
    [1.0, 0.0, 0.5, 0, 120],
    [1.0, 0.0, 0.75, 0, 120],
    [1.0, 0.0, 1.0, 120, 120],
  ])(
    "looseness[%p] aggression[%p] hand-rating[%p] minRaise[%p] maxCall[%p]",
    (
      looseness: number,
      aggression: number,
      handRating: number,
      minRaise: number,
      maxCall: number
    ) => {
      const actions = calculateAcceptedActions(
        handRating,
        looseness,
        aggression,
        stack,
        bigBlind
      );
      expect(actions.minRaise).toBe(minRaise);
      expect(actions.maxCall).toBe(maxCall);
    }
  );
});
